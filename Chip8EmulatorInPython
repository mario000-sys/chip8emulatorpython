import pygame
import tkinter as tk
from tkinter import filedialog
import sys
import random

# Constants
SCREEN_WIDTH, SCREEN_HEIGHT = 64, 32
SCALE = 10
WINDOW_WIDTH, WINDOW_HEIGHT = SCREEN_WIDTH * SCALE, SCREEN_HEIGHT * SCALE
FONT_START_ADDRESS = 0x50
START_ADDRESS = 0x200

# CHIP-8 fontset
FONTSET = [
    0xF0, 0x90, 0x90, 0x90, 0xF0,  # 0
    0x20, 0x60, 0x20, 0x20, 0x70,  # 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0,  # 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,  # 3
    0x90, 0x90, 0xF0, 0x10, 0x10,  # 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0,  # 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,  # 6
    0xF0, 0x10, 0x20, 0x40, 0x40,  # 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,  # 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0,  # 9
    0xF0, 0x90, 0xF0, 0x90, 0x90,  # A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,  # B
    0xF0, 0x80, 0x80, 0x80, 0xF0,  # C
    0xE0, 0x90, 0x90, 0x90, 0xE0,  # D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,  # E
    0xF0, 0x80, 0xF0, 0x80, 0x80   # F
]

# Updated CHIP-8 to keyboard mapping
KEY_MAP = {
    pygame.K_1: 0x1,
    pygame.K_2: 0x2,
    pygame.K_3: 0x3,
    pygame.K_4: 0xC,
    pygame.K_q: 0x4,
    pygame.K_w: 0x5,
    pygame.K_e: 0x6,
    pygame.K_r: 0xD,
    pygame.K_a: 0x7,
    pygame.K_s: 0x8,
    pygame.K_d: 0x9,
    pygame.K_f: 0xE,
    pygame.K_z: 0xA,
    pygame.K_x: 0x0,
    pygame.K_c: 0xB,
    pygame.K_v: 0xF
}

def print_keypad_mapping():
    print("""
CHIP-8 Keypad Layout (Mapped to QWERTY):

Original     Keyboard
----------------------
1 2 3 C   =>  1 2 3 4
4 5 6 D   =>  Q W E R
7 8 9 E   =>  A S D F
A 0 B F   =>  Z X C V
""")

class Chip8:
    def __init__(self):
        self.memory = [0] * 4096
        self.v = [0] * 16
        self.i = 0
        self.pc = START_ADDRESS
        self.stack = []
        self.delay_timer = 0
        self.sound_timer = 0
        self.display = [[0]*SCREEN_WIDTH for _ in range(SCREEN_HEIGHT)]
        self.keypad = [0]*16
        self.draw_flag = False
        self.waiting_for_key = False
        self.waiting_reg = None

        for i, byte in enumerate(FONTSET):
            self.memory[FONT_START_ADDRESS + i] = byte

    def load_rom(self, path):
        with open(path, 'rb') as f:
            rom = f.read()
        for i, byte in enumerate(rom):
            self.memory[START_ADDRESS + i] = byte

    def cycle(self):
        if self.waiting_for_key:
            return

        opcode = (self.memory[self.pc] << 8) | self.memory[self.pc + 1]
        self.pc += 2
        self.execute(opcode)

        if self.delay_timer > 0:
            self.delay_timer -= 1
        if self.sound_timer > 0:
            self.sound_timer -= 1

    def execute(self, opcode):
        nnn = opcode & 0x0FFF
        n = opcode & 0x000F
        x = (opcode & 0x0F00) >> 8
        y = (opcode & 0x00F0) >> 4
        kk = opcode & 0x00FF

        if opcode == 0x00E0:
            self.display = [[0]*SCREEN_WIDTH for _ in range(SCREEN_HEIGHT)]
            self.draw_flag = True

        elif opcode == 0x00EE:
            self.pc = self.stack.pop()

        elif opcode & 0xF000 == 0x1000:
            self.pc = nnn

        elif opcode & 0xF000 == 0x2000:
            self.stack.append(self.pc)
            self.pc = nnn

        elif opcode & 0xF000 == 0x3000:
            if self.v[x] == kk:
                self.pc += 2

        elif opcode & 0xF000 == 0x4000:
            if self.v[x] != kk:
                self.pc += 2

        elif opcode & 0xF000 == 0x5000 and (opcode & 0x000F) == 0:
            if self.v[x] == self.v[y]:
                self.pc += 2

        elif opcode & 0xF000 == 0x6000:
            self.v[x] = kk

        elif opcode & 0xF000 == 0x7000:
            self.v[x] = (self.v[x] + kk) & 0xFF

        elif opcode & 0xF000 == 0x8000:
            if n == 0x0:
                self.v[x] = self.v[y]
            elif n == 0x1:
                self.v[x] |= self.v[y]
            elif n == 0x2:
                self.v[x] &= self.v[y]
            elif n == 0x3:
                self.v[x] ^= self.v[y]
            elif n == 0x4:
                sum_ = self.v[x] + self.v[y]
                self.v[0xF] = 1 if sum_ > 0xFF else 0
                self.v[x] = sum_ & 0xFF
            elif n == 0x5:
                self.v[0xF] = 1 if self.v[x] > self.v[y] else 0
                self.v[x] = (self.v[x] - self.v[y]) & 0xFF
            elif n == 0x6:
                self.v[0xF] = self.v[x] & 0x1
                self.v[x] >>= 1
            elif n == 0x7:
                self.v[0xF] = 1 if self.v[y] > self.v[x] else 0
                self.v[x] = (self.v[y] - self.v[x]) & 0xFF
            elif n == 0xE:
                self.v[0xF] = (self.v[x] & 0x80) >> 7
                self.v[x] = (self.v[x] << 1) & 0xFF

        elif opcode & 0xF000 == 0x9000 and (opcode & 0x000F) == 0:
            if self.v[x] != self.v[y]:
                self.pc += 2

        elif opcode & 0xF000 == 0xA000:
            self.i = nnn

        elif opcode & 0xF000 == 0xB000:
            self.pc = nnn + self.v[0]

        elif opcode & 0xF000 == 0xC000:
            self.v[x] = random.randint(0, 255) & kk

        elif opcode & 0xF000 == 0xD000:
            vx, vy = self.v[x], self.v[y]
            height = n
            self.v[0xF] = 0
            for row in range(height):
                sprite_byte = self.memory[self.i + row]
                for col in range(8):
                    sprite_pixel = (sprite_byte >> (7 - col)) & 1
                    if sprite_pixel == 1:
                        px = (vx + col) % SCREEN_WIDTH
                        py = (vy + row) % SCREEN_HEIGHT
                        if self.display[py][px] == 1:
                            self.v[0xF] = 1
                        self.display[py][px] ^= 1
            self.draw_flag = True

        elif opcode & 0xF000 == 0xE000:
            if kk == 0x9E:
                if self.keypad[self.v[x]]:
                    self.pc += 2
            elif kk == 0xA1:
                if not self.keypad[self.v[x]]:
                    self.pc += 2

        elif opcode & 0xF000 == 0xF000:
            if kk == 0x07:
                self.v[x] = self.delay_timer
            elif kk == 0x0A:
                self.waiting_for_key = True
                self.waiting_reg = x
            elif kk == 0x15:
                self.delay_timer = self.v[x]
            elif kk == 0x18:
                self.sound_timer = self.v[x]
            elif kk == 0x1E:
                self.i = (self.i + self.v[x]) & 0xFFF
            elif kk == 0x29:
                self.i = FONT_START_ADDRESS + (self.v[x] * 5)
            elif kk == 0x33:
                val = self.v[x]
                self.memory[self.i] = val // 100
                self.memory[self.i + 1] = (val // 10) % 10
                self.memory[self.i + 2] = val % 10
            elif kk == 0x55:
                for idx in range(x + 1):
                    self.memory[self.i + idx] = self.v[idx]
            elif kk == 0x65:
                for idx in range(x + 1):
                    self.v[idx] = self.memory[self.i + idx]

    def set_key(self, key, is_pressed):
        self.keypad[key] = is_pressed
        if self.waiting_for_key and is_pressed:
            self.v[self.waiting_reg] = key
            self.waiting_for_key = False
            self.waiting_reg = None

def choose_rom_file():
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Select a CHIP-8 ROM file",
        filetypes=[("CHIP-8 ROMs", "*.ch8 *.rom"), ("All files", "*.*")]
    )
    root.destroy()
    return file_path

def main():
    print_keypad_mapping()

    rom_path = choose_rom_file()
    if not rom_path:
        print("No file selected. Exiting.")
        sys.exit()

    pygame.init()
    pygame.mixer.init()

    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("CHIP-8 Emulator")
    clock = pygame.time.Clock()
    chip8 = Chip8()
    chip8.load_rom(rom_path)

    try:
        beep_sound = pygame.mixer.Sound('beep.wav')
    except pygame.error:
        beep_sound = None
        print("Warning: beep.wav not found. Sound disabled.")

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key in KEY_MAP:
                    chip8.set_key(KEY_MAP[event.key], True)
                elif event.key == pygame.K_ESCAPE:
                    running = False
            elif event.type == pygame.KEYUP:
                if event.key in KEY_MAP:
                    chip8.set_key(KEY_MAP[event.key], False)

        chip8.cycle()

        if chip8.draw_flag:
            screen.fill((0, 0, 0))
            for y in range(SCREEN_HEIGHT):
                for x in range(SCREEN_WIDTH):
                    if chip8.display[y][x]:
                        rect = pygame.Rect(x * SCALE, y * SCALE, SCALE, SCALE)
                        pygame.draw.rect(screen, (255, 255, 255), rect)
            pygame.display.flip()
            chip8.draw_flag = False

        if chip8.sound_timer > 0 and beep_sound and not pygame.mixer.get_busy():
            beep_sound.play()

        clock.tick(500)

    pygame.quit()

if __name__ == "__main__":
    main()
